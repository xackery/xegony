// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/xegony.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XegonyClient is the client API for Xegony service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XegonyClient interface {
	NpcSearch(ctx context.Context, in *NpcSearchRequest, opts ...grpc.CallOption) (*NpcSearchResponse, error)
	NpcCreate(ctx context.Context, in *NpcCreateRequest, opts ...grpc.CallOption) (*NpcCreateResponse, error)
	NpcRead(ctx context.Context, in *NpcReadRequest, opts ...grpc.CallOption) (*NpcReadResponse, error)
	NpcUpdate(ctx context.Context, in *NpcUpdateRequest, opts ...grpc.CallOption) (*NpcUpdateResponse, error)
	NpcDelete(ctx context.Context, in *NpcDeleteRequest, opts ...grpc.CallOption) (*NpcDeleteResponse, error)
	NpcPatch(ctx context.Context, in *NpcPatchRequest, opts ...grpc.CallOption) (*NpcPatchResponse, error)
}

type xegonyClient struct {
	cc *grpc.ClientConn
}

func NewXegonyClient(cc *grpc.ClientConn) XegonyClient {
	return &xegonyClient{cc}
}

func (c *xegonyClient) NpcSearch(ctx context.Context, in *NpcSearchRequest, opts ...grpc.CallOption) (*NpcSearchResponse, error) {
	out := new(NpcSearchResponse)
	err := c.cc.Invoke(ctx, "/pb.Xegony/NpcSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xegonyClient) NpcCreate(ctx context.Context, in *NpcCreateRequest, opts ...grpc.CallOption) (*NpcCreateResponse, error) {
	out := new(NpcCreateResponse)
	err := c.cc.Invoke(ctx, "/pb.Xegony/NpcCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xegonyClient) NpcRead(ctx context.Context, in *NpcReadRequest, opts ...grpc.CallOption) (*NpcReadResponse, error) {
	out := new(NpcReadResponse)
	err := c.cc.Invoke(ctx, "/pb.Xegony/NpcRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xegonyClient) NpcUpdate(ctx context.Context, in *NpcUpdateRequest, opts ...grpc.CallOption) (*NpcUpdateResponse, error) {
	out := new(NpcUpdateResponse)
	err := c.cc.Invoke(ctx, "/pb.Xegony/NpcUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xegonyClient) NpcDelete(ctx context.Context, in *NpcDeleteRequest, opts ...grpc.CallOption) (*NpcDeleteResponse, error) {
	out := new(NpcDeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.Xegony/NpcDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xegonyClient) NpcPatch(ctx context.Context, in *NpcPatchRequest, opts ...grpc.CallOption) (*NpcPatchResponse, error) {
	out := new(NpcPatchResponse)
	err := c.cc.Invoke(ctx, "/pb.Xegony/NpcPatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XegonyServer is the server API for Xegony service.
type XegonyServer interface {
	NpcSearch(context.Context, *NpcSearchRequest) (*NpcSearchResponse, error)
	NpcCreate(context.Context, *NpcCreateRequest) (*NpcCreateResponse, error)
	NpcRead(context.Context, *NpcReadRequest) (*NpcReadResponse, error)
	NpcUpdate(context.Context, *NpcUpdateRequest) (*NpcUpdateResponse, error)
	NpcDelete(context.Context, *NpcDeleteRequest) (*NpcDeleteResponse, error)
	NpcPatch(context.Context, *NpcPatchRequest) (*NpcPatchResponse, error)
}

func RegisterXegonyServer(s *grpc.Server, srv XegonyServer) {
	s.RegisterService(&_Xegony_serviceDesc, srv)
}

func _Xegony_NpcSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NpcSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XegonyServer).NpcSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xegony/NpcSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XegonyServer).NpcSearch(ctx, req.(*NpcSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xegony_NpcCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NpcCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XegonyServer).NpcCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xegony/NpcCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XegonyServer).NpcCreate(ctx, req.(*NpcCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xegony_NpcRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NpcReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XegonyServer).NpcRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xegony/NpcRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XegonyServer).NpcRead(ctx, req.(*NpcReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xegony_NpcUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NpcUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XegonyServer).NpcUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xegony/NpcUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XegonyServer).NpcUpdate(ctx, req.(*NpcUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xegony_NpcDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NpcDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XegonyServer).NpcDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xegony/NpcDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XegonyServer).NpcDelete(ctx, req.(*NpcDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xegony_NpcPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NpcPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XegonyServer).NpcPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Xegony/NpcPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XegonyServer).NpcPatch(ctx, req.(*NpcPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Xegony_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Xegony",
	HandlerType: (*XegonyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NpcSearch",
			Handler:    _Xegony_NpcSearch_Handler,
		},
		{
			MethodName: "NpcCreate",
			Handler:    _Xegony_NpcCreate_Handler,
		},
		{
			MethodName: "NpcRead",
			Handler:    _Xegony_NpcRead_Handler,
		},
		{
			MethodName: "NpcUpdate",
			Handler:    _Xegony_NpcUpdate_Handler,
		},
		{
			MethodName: "NpcDelete",
			Handler:    _Xegony_NpcDelete_Handler,
		},
		{
			MethodName: "NpcPatch",
			Handler:    _Xegony_NpcPatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/xegony.proto",
}

func init() { proto.RegisterFile("pb/xegony.proto", fileDescriptor_a2a8340b69fdd7bc) }

var fileDescriptor_a2a8340b69fdd7bc = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x0e, 0xd2, 0x30,
	0x18, 0xc7, 0x23, 0x46, 0xd0, 0x86, 0x68, 0xac, 0x10, 0x92, 0x45, 0x92, 0xc9, 0x91, 0xc0, 0x0a,
	0x78, 0xe3, 0x86, 0x7a, 0xd0, 0xc4, 0x2c, 0x88, 0x31, 0x7a, 0xb4, 0xeb, 0xbe, 0x74, 0x8b, 0xd0,
	0x7e, 0xb6, 0x45, 0x21, 0x84, 0x8b, 0x8f, 0xa0, 0x8f, 0xe6, 0x2b, 0x78, 0xf4, 0x21, 0x0c, 0xdd,
	0x46, 0xd8, 0xe2, 0x69, 0xf9, 0xff, 0xf7, 0xed, 0xb7, 0x5f, 0xd3, 0x8f, 0x3c, 0xc2, 0x84, 0x1d,
	0x40, 0x6a, 0x75, 0x8c, 0xd0, 0x68, 0xa7, 0x69, 0x0b, 0x93, 0xe0, 0xa9, 0xd4, 0x5a, 0x6e, 0x81,
	0x71, 0xcc, 0x19, 0x57, 0x4a, 0x3b, 0xee, 0x72, 0xad, 0x6c, 0x31, 0x11, 0x4c, 0xfc, 0x43, 0x4c,
	0x25, 0xa8, 0xa9, 0xfd, 0xce, 0xa5, 0x04, 0xc3, 0x34, 0xfa, 0x89, 0xff, 0x4c, 0x77, 0x31, 0x61,
	0x0a, 0x45, 0x91, 0x16, 0x7f, 0xef, 0x92, 0xf6, 0x27, 0xff, 0x3b, 0xfa, 0x91, 0x3c, 0x88, 0x51,
	0xbc, 0x07, 0x6e, 0x44, 0x46, 0x7b, 0x11, 0x26, 0xd1, 0x35, 0x6e, 0xe0, 0xeb, 0x1e, 0xac, 0x0b,
	0xfa, 0x8d, 0xd6, 0xa2, 0x56, 0x16, 0x46, 0xc3, 0x1f, 0xbf, 0xff, 0xfc, 0x6a, 0x0d, 0x68, 0x9f,
	0x7d, 0x9b, 0x5f, 0xd8, 0xcc, 0xfa, 0xf7, 0xec, 0xa4, 0xf8, 0x0e, 0xce, 0xf4, 0xad, 0x07, 0xbf,
	0x34, 0xc0, 0x1d, 0x5c, 0xc1, 0x45, 0x6c, 0x82, 0xab, 0xb6, 0x04, 0x53, 0x0f, 0xee, 0x8e, 0x3a,
	0x25, 0x78, 0x79, 0x67, 0x4c, 0x5f, 0x93, 0x4e, 0x8c, 0x62, 0x03, 0x3c, 0xa5, 0xb4, 0xfc, 0xea,
	0x12, 0x2a, 0xd2, 0x93, 0x5a, 0x57, 0x72, 0x7a, 0x9e, 0xf3, 0x90, 0x76, 0x2b, 0xc1, 0x53, 0x9e,
	0x9e, 0xe9, 0x3b, 0xef, 0xf5, 0x01, 0xd3, 0x5b, 0xaf, 0x22, 0x36, 0xbd, 0xaa, 0xb6, 0xe4, 0x0d,
	0x3c, 0xef, 0x71, 0x50, 0xe3, 0x5d, 0xe4, 0x62, 0x8f, 0x7c, 0x05, 0x5b, 0xb8, 0x41, 0x16, 0xb1,
	0x89, 0xac, 0xda, 0xba, 0xe2, 0xb8, 0xae, 0x18, 0x93, 0xfb, 0x31, 0x8a, 0x35, 0x77, 0x22, 0xa3,
	0xd5, 0xc9, 0x7c, 0xaa, 0x68, 0xbd, 0x7a, 0x59, 0xf7, 0x5b, 0x34, 0xfd, 0x5e, 0xc0, 0xcf, 0x55,
	0x42, 0x3f, 0x13, 0x52, 0x5c, 0x79, 0xb8, 0x5a, 0xbf, 0xa1, 0x43, 0x09, 0x0a, 0x4c, 0x2e, 0xc2,
	0x14, 0xac, 0x30, 0xb9, 0xdf, 0x9b, 0x50, 0x6a, 0xb0, 0x61, 0x06, 0x06, 0x46, 0x13, 0xd2, 0xb1,
	0x7b, 0x44, 0x6d, 0x1c, 0x7d, 0x96, 0x39, 0x87, 0x76, 0xc9, 0x98, 0xcc, 0x5d, 0xb6, 0x4f, 0x22,
	0xa1, 0x77, 0xec, 0xc0, 0xc5, 0x17, 0x30, 0xc7, 0x72, 0x65, 0x17, 0xf7, 0x66, 0xd1, 0x3c, 0x9a,
	0x25, 0x6d, 0xbf, 0x5c, 0xcf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x84, 0x76, 0xba, 0x78, 0xcd,
	0x02, 0x00, 0x00,
}
